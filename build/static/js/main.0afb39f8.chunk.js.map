{"version":3,"sources":["components/ToDo/ToDoForm/ToDoForm.tsx","components/ToDo/ToDoListItem/ToDoListItem.tsx","components/ToDo/ToDoList/ToDoList.tsx","components/ToDo/ToDoControls/ToDoControl/ToDoControl.tsx","components/ToDo/ToDoControls/ToDoControls.tsx","components/ToDo/ToDo.tsx","store/actions/actions.tsx","store/actions/actionsConstants.tsx","App.tsx","serviceWorker.ts","store/reducer/reducer.tsx","index.tsx"],"names":["ToDoForm","props","useState","inputValue","setInputValue","className","onSubmit","event","preventDefault","length","addItem","title","id","Date","now","status","data-testid","type","onChange","target","value","placeholder","ToDoListItem","onClick","removeItem","changeStatus","ToDoList","itemsCoponents","items","filter","el","itemsToShowFlag","map","item","key","ToDoControl","clickHandler","name","ToDoControls","showAllItems","showComplitedItems","showActiveItems","mapDispatchToProps","payload","prop","ToDo","connect","state","toDoItems","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0afb39f8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { ToDoFormInterface } from '../../../types/components/ToDo/ToDoForm/types';\r\n\r\nconst ToDoForm: React.FC<ToDoFormInterface> = props => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const inputChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const submitForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (inputValue.length) {\r\n      props.addItem({ title: inputValue, id: Date.now(), status: true });\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"todo__form\"\r\n      onSubmit={event => {\r\n        submitForm(event);\r\n      }}\r\n      data-testid=\"todo_form\"\r\n    >\r\n      <input\r\n        className=\"todo__input\"\r\n        type=\"text\"\r\n        data-testid=\"todo__input\"\r\n        onChange={event => {\r\n          inputChangeHandler(event);\r\n        }}\r\n        value={inputValue}\r\n        placeholder=\"Add ToDo item\"\r\n      />\r\n      <input type=\"submit\" className=\"todo__input todo__input--type-submit\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ToDoForm;\r\n","import React from 'react';\r\nimport { ToDoListItemPropsInterface } from '../../../types/components/ToDo/ToDoListItem/types';\r\n\r\nconst ToDoListItem: React.FC<ToDoListItemPropsInterface> = props => {\r\n  const clickHandler = () => {\r\n    if (props.removeItem) {\r\n      props.removeItem(props.id);\r\n    }\r\n  };\r\n  const statusChangeHandler = () => {\r\n    if (props.changeStatus) {\r\n      props.changeStatus(props.id);\r\n    }\r\n  };\r\n  return (\r\n    <li className=\"todo__item\" data-testid=\"todo-item\">\r\n      <span data-testid=\"todo__title\" className=\"todo__title\">\r\n        {props.title}\r\n      </span>\r\n      <button\r\n        className=\"todo__control\"\r\n        data-testid=\"delete-button\"\r\n        onClick={clickHandler}\r\n      >\r\n        Delete\r\n      </button>\r\n      <span className=\"todo__status\" data-testid=\"todo__status\">\r\n        Status {props.status ? 'Active' : 'Complited'}\r\n      </span>\r\n      <button\r\n        className=\"todo__control\"\r\n        data-testid=\"status-toggler\"\r\n        onClick={statusChangeHandler}\r\n      >\r\n        Change status\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ToDoListItem;\r\n","import React from 'react';\r\nimport ToDoListItem from '../ToDoListItem/ToDoListItem';\r\nimport { ToDoListPropInterface } from '../../../types/components/ToDo/ToDoList/types';\r\n\r\nconst ToDoList: React.FC<ToDoListPropInterface> = props => {\r\n  const itemsCoponents = props.items.filter(el => {\r\n    if (props.itemsToShowFlag === 'all') {\r\n      return true;\r\n    } else if (props.itemsToShowFlag === 'complited' && !el.status) {\r\n      return true;\r\n    } else if (props.itemsToShowFlag === 'active' && el.status) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  return (\r\n    <ul className=\"todo__items-list\">\r\n      {itemsCoponents.map(item => {\r\n        return (\r\n          <ToDoListItem\r\n            key={item.id}\r\n            title={item.title}\r\n            id={item.id}\r\n            status={item.status}\r\n            removeItem={props.removeItem}\r\n            changeStatus={props.changeStatus}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\nimport { ToDoControlInterface } from '../../../../types/components/ToDo/ToDoControls/ToDoControl/types';\r\n\r\nconst ToDoControl: React.FC<ToDoControlInterface> = props => {\r\n  const clickHandler = () => {\r\n    if (props.id) {\r\n      props.clickHandler(props.id);\r\n    } else {\r\n      props.clickHandler();\r\n    }\r\n  };\r\n  return (\r\n    <button\r\n      className=\"todo__control\"\r\n      data-testid=\"todo-control\"\r\n      onClick={() => {\r\n        clickHandler();\r\n      }}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ToDoControl;\r\n","import React from 'react';\r\nimport ToDoControl from './ToDoControl/ToDoControl';\r\nimport { ToDoControlsInterface } from '../../../types/components/ToDo/ToDoControls/type';\r\n\r\nconst ToDoControls: React.FC<ToDoControlsInterface> = props => {\r\n  return (\r\n    <div className=\"todo__controls\">\r\n      <ToDoControl name=\"Show All\" clickHandler={props.showAllItems} />\r\n      <ToDoControl\r\n        name=\"Show Completed\"\r\n        clickHandler={props.showComplitedItems}\r\n      />\r\n      <ToDoControl name=\"Show Active\" clickHandler={props.showActiveItems} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoControls;\r\n","import React from 'react';\r\nimport ToDoForm from './ToDoForm/ToDoForm';\r\nimport ToDoList from './ToDoList/ToDoList';\r\nimport ToDoControls from './ToDoControls/ToDoControls';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { StoreInterface } from '../../types/store/reducer/types';\r\nimport * as actionCreators from '../../store/actions/actions';\r\n\r\nimport { ToDoInterface } from '../../types/components/ToDo/types';\r\n\r\nconst ConnectedToDo: React.FC<ToDoInterface> = props => {\r\n  return (\r\n    <div className=\"todo\">\r\n      <ToDoForm addItem={props.addItem} />\r\n      Items type: {props.itemsToShowFlag}\r\n      <ToDoList\r\n        items={props.items}\r\n        removeItem={props.removeItem}\r\n        changeStatus={props.changeStatus}\r\n        itemsToShowFlag={props.itemsToShowFlag}\r\n      />\r\n      <ToDoControls\r\n        showAllItems={props.showAllItems}\r\n        showComplitedItems={props.showComplitedItems}\r\n        showActiveItems={props.showActiveItems}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreInterface) => {\r\n  const { toDoItems: items, itemsToShowFlag } = state;\r\n  return { items, itemsToShowFlag };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  showAllItems: actionCreators.showAllItems,\r\n  showComplitedItems: actionCreators.showComplitedItems,\r\n  showActiveItems: actionCreators.showActiveItems,\r\n  removeItem: actionCreators.removeItem,\r\n  changeStatus: actionCreators.changeStatus,\r\n  addItem: actionCreators.addItem\r\n};\r\n\r\nconst ToDo = connect(mapStateToProps, mapDispatchToProps)(ConnectedToDo);\r\nexport default ToDo;\r\n","import { ToDoListItemPropsInterface } from '../../types/components/ToDo/ToDoListItem/types';\r\nimport {\r\n  ADD_TODO_ITEM,\r\n  REMOVE_TODO_ITEM,\r\n  CHANGE_ITEM_STATUS,\r\n  SHOW_ALL_ITEMS,\r\n  SHOW_COMPLITED_ITEMS,\r\n  SHOW_ACTIVE_ITEMS\r\n} from './actionsConstants';\r\nimport * as actionsTypes from '../../types/store/actions/types';\r\n\r\nexport const addItem: actionsTypes.AddItemType = (\r\n  prop: ToDoListItemPropsInterface\r\n) => {\r\n  return {\r\n    type: ADD_TODO_ITEM,\r\n    payload: prop\r\n  };\r\n};\r\n\r\nexport const removeItem: actionsTypes.RemoveItemType = (id: number) => {\r\n  return {\r\n    type: REMOVE_TODO_ITEM,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const changeStatus: actionsTypes.ChangeStatusType = (id: number) => {\r\n  return {\r\n    type: CHANGE_ITEM_STATUS,\r\n    payload: id\r\n  };\r\n};\r\n\r\nexport const showAllItems: actionsTypes.ShowAllItems = () => {\r\n  return {\r\n    type: SHOW_ALL_ITEMS\r\n  };\r\n};\r\n\r\nexport const showComplitedItems: actionsTypes.ShowComplitedItems = () => {\r\n  return {\r\n    type: SHOW_COMPLITED_ITEMS\r\n  };\r\n};\r\n\r\nexport const showActiveItems: actionsTypes.ShowActiveItems = () => {\r\n  return {\r\n    type: SHOW_ACTIVE_ITEMS\r\n  };\r\n};\r\n","export const ADD_TODO_ITEM = 'ADD_TODO_ITEM';\r\nexport const REMOVE_TODO_ITEM = 'REMOVE_TODO_ITEM';\r\nexport const CHANGE_ITEM_STATUS = 'CHANGE_ITEM_STATUS';\r\nexport const SHOW_ALL_ITEMS = 'SHOW_ALL_ITEMS';\r\nexport const SHOW_COMPLITED_ITEMS = 'SHOW_COMPLITED_ITEMS';\r\nexport const SHOW_ACTIVE_ITEMS = 'SHOW_ACTIVE_ITEMS';\r\n","import React from 'react';\r\nimport ToDo from './components/ToDo/ToDo';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <ToDo />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ToDoListItemPropsInterface } from '../../types/components/ToDo/ToDoListItem/types';\r\nimport {\r\n  ADD_TODO_ITEM,\r\n  REMOVE_TODO_ITEM,\r\n  CHANGE_ITEM_STATUS,\r\n  SHOW_ALL_ITEMS,\r\n  SHOW_COMPLITED_ITEMS,\r\n  SHOW_ACTIVE_ITEMS\r\n} from '../actions/actionsConstants';\r\nimport { ActionInterface } from '../../types/store/actions/types';\r\nimport { StoreInterface } from '../../types/store/reducer/types';\r\n\r\nexport const initialState = {\r\n  toDoItems: [],\r\n  itemsToShowFlag: 'all'\r\n};\r\n\r\nexport const reducer = (\r\n  state: StoreInterface = initialState,\r\n  action: ActionInterface\r\n): StoreInterface => {\r\n  switch (action.type) {\r\n    case ADD_TODO_ITEM:\r\n      return {\r\n        ...state,\r\n        toDoItems: [\r\n          ...state.toDoItems,\r\n          {\r\n            id: action.payload.id,\r\n            title: action.payload.title,\r\n            status: action.payload.status\r\n          }\r\n        ]\r\n      };\r\n    case REMOVE_TODO_ITEM:\r\n      return {\r\n        ...state,\r\n        toDoItems: state.toDoItems.filter(item => {\r\n          return item.id !== action.payload;\r\n        })\r\n      };\r\n    case CHANGE_ITEM_STATUS:\r\n      return {\r\n        ...state,\r\n        toDoItems: [...state.toDoItems].map(\r\n          (item: ToDoListItemPropsInterface) => {\r\n            if (action.payload === item.id) {\r\n              item.status = !item.status;\r\n            }\r\n            return item;\r\n          }\r\n        )\r\n      };\r\n    case SHOW_ALL_ITEMS:\r\n      return {\r\n        ...state,\r\n        itemsToShowFlag: 'all'\r\n      };\r\n    case SHOW_COMPLITED_ITEMS:\r\n      return {\r\n        ...state,\r\n        itemsToShowFlag: 'complited'\r\n      };\r\n    case SHOW_ACTIVE_ITEMS:\r\n      return {\r\n        ...state,\r\n        itemsToShowFlag: 'active'\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux';\r\nimport { reducer } from './store/reducer/reducer';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}